{"ast":null,"code":"import Helper from './Helper';\nexport default class FuzzySearch {\n  constructor() {\n    let haystack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false\n    }, options);\n  }\n\n  search() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    if (query === '') {\n      return this.haystack;\n    }\n\n    const results = [];\n\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({\n            item,\n            score\n          });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n          let found = false;\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              found = true;\n              results.push({\n                item,\n                score\n              });\n              break;\n            }\n          }\n\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n\n    return results.map(result => result.item);\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n\n    if (!caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n    if (!indexes) {\n      return false;\n    } // Exact matches should be first.\n\n\n    if (item === query) {\n      return 1;\n    } // If we have more than 2 letters, matches close to each other should be first.\n\n\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    } // Matches closest to the start of the string should be first.\n\n\n    return 2 + indexes[0];\n  }\n\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n      indexes[loopingIndex] = [startingIndex];\n\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n        index = item.indexOf(letter, index);\n\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n          break;\n        }\n\n        indexes[loopingIndex].push(index);\n        index++;\n      }\n    });\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n\n    if (!indexes.length) {\n      return false;\n    }\n\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n      return a - b;\n    })[0];\n  }\n\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n\n      return index;\n    }).filter(index => index !== false);\n  }\n\n}","map":{"version":3,"sources":["/home/krishnachaitanya/training/todo-react/todo-react/node_modules/fuzzy-search/src/FuzzySearch.js"],"names":["Helper","FuzzySearch","constructor","haystack","keys","options","Array","isArray","Object","assign","caseSensitive","sort","search","query","results","i","length","item","score","isMatch","push","y","propertyValues","getDescendantProperty","found","z","a","b","map","result","String","toLocaleLowerCase","indexes","nearestIndexesFor","letters","split","indexesOfFirstLetter","forEach","startingIndex","loopingIndex","index","letter","indexOf","filter","letterIndexes","match"],"mappings":"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","sourcesContent":["import Helper from './Helper';\n\nexport default class FuzzySearch {\n  constructor(haystack = [], keys = [], options = {}) {\n    if (! Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false,\n    }, options);\n  }\n\n  search(query = '') {\n    if (query === '') {\n      return this.haystack;\n    }\n\n    const results = [];\n\n    for (let i = 0; i < this.haystack.length; i++) {\n      const item = this.haystack[i];\n\n      if (this.keys.length === 0) {\n        const score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({ item, score });\n        }\n      } else {\n        for (let y = 0; y < this.keys.length; y++) {\n          const propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n\n          let found = false;\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            const score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              found = true;\n\n              results.push({ item, score });\n\n              break;\n            }\n          }\n\n          if (found) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => a.score - b.score);\n    }\n\n    return results.map(result => result.item);\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    item = String(item);\n    query = String(query);\n\n    if (! caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    const indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n    if (! indexes) {\n      return false;\n    }\n\n    // Exact matches should be first.\n    if (item === query) {\n      return 1;\n    }\n\n    // If we have more than 2 letters, matches close to each other should be first.\n    if (indexes.length > 1) {\n      return 2 + (indexes[indexes.length - 1] - indexes[0]);\n    }\n\n    // Matches closest to the start of the string should be first.\n    return 2 + indexes[0];\n  }\n\n  static nearestIndexesFor(item, query) {\n    const letters = query.split('');\n    let indexes = [];\n\n    const indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n\n    indexesOfFirstLetter.forEach((startingIndex, loopingIndex) => {\n      let index = startingIndex + 1;\n\n      indexes[loopingIndex] = [startingIndex];\n\n      for (let i = 1; i < letters.length; i++) {\n        const letter = letters[i];\n\n        index = item.indexOf(letter, index);\n\n        if (index === -1) {\n          indexes[loopingIndex] = false;\n\n          break;\n        }\n\n        indexes[loopingIndex].push(index);\n\n        index++;\n      }\n    });\n\n    indexes = indexes.filter(letterIndexes => letterIndexes !== false);\n\n    if (! indexes.length) {\n      return false;\n    }\n\n    return indexes.sort((a, b) => {\n      if (a.length === 1) {\n        return a[0] - b[0];\n      }\n\n      a = a[a.length - 1] - a[0];\n      b = b[b.length - 1] - b[0];\n\n      return a - b;\n    })[0];\n  }\n\n  static indexesOfFirstLetter(item, query) {\n    const match = query[0];\n\n    return item.split('').map((letter, index) => {\n      if (letter !== match) {\n        return false;\n      }\n\n      return index;\n    }).filter(index => index !== false);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}