{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst Node_1 = __importDefault(require(\"./Node\"));\n\nconst embeds_1 = __importDefault(require(\"../rules/embeds\"));\n\nconst cache = {};\n\nclass Embed extends Node_1.default {\n  get name() {\n    return \"embed\";\n  }\n\n  get schema() {\n    return {\n      content: \"inline*\",\n      group: \"block\",\n      atom: true,\n      attrs: {\n        href: {}\n      },\n      parseDOM: [{\n        tag: \"iframe[class=embed]\",\n        getAttrs: dom => {\n          const {\n            embeds\n          } = this.editor.props;\n          const href = dom.getAttribute(\"src\") || \"\";\n\n          if (embeds) {\n            for (const embed of embeds) {\n              const matches = embed.matcher(href);\n\n              if (matches) {\n                return {\n                  href\n                };\n              }\n            }\n          }\n\n          return {};\n        }\n      }],\n      toDOM: node => [\"iframe\", {\n        class: \"embed\",\n        src: node.attrs.href,\n        contentEditable: false\n      }, 0]\n    };\n  }\n\n  get rulePlugins() {\n    return [embeds_1.default(this.options.embeds)];\n  }\n\n  component(_ref) {\n    let {\n      isEditable,\n      isSelected,\n      theme,\n      node\n    } = _ref;\n    const {\n      embeds\n    } = this.editor.props;\n    const hit = cache[node.attrs.href];\n    let Component = hit ? hit.Component : undefined;\n    let matches = hit ? hit.matches : undefined;\n\n    if (!Component) {\n      for (const embed of embeds) {\n        const m = embed.matcher(node.attrs.href);\n\n        if (m) {\n          Component = embed.component;\n          matches = m;\n          cache[node.attrs.href] = {\n            Component,\n            matches\n          };\n        }\n      }\n    }\n\n    if (!Component) {\n      return null;\n    }\n\n    return React.createElement(Component, {\n      attrs: Object.assign(Object.assign({}, node.attrs), {\n        matches\n      }),\n      isEditable: isEditable,\n      isSelected: isSelected,\n      theme: theme\n    });\n  }\n\n  commands(_ref2) {\n    let {\n      type\n    } = _ref2;\n    return attrs => (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(type.create(attrs)).scrollIntoView());\n      return true;\n    };\n  }\n\n  toMarkdown(state, node) {\n    state.ensureNewLine();\n    state.write(\"[\" + state.esc(node.attrs.href) + \"](\" + state.esc(node.attrs.href) + \")\");\n    state.write(\"\\n\\n\");\n  }\n\n  parseMarkdown() {\n    return {\n      node: \"embed\",\n      getAttrs: token => ({\n        href: token.attrGet(\"href\")\n      })\n    };\n  }\n\n}\n\nexports.default = Embed;","map":{"version":3,"sources":["../../src/nodes/Embed.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = __importStar(require(\"react\"));\nconst Node_1 = __importDefault(require(\"./Node\"));\nconst embeds_1 = __importDefault(require(\"../rules/embeds\"));\nconst cache = {};\nclass Embed extends Node_1.default {\n    get name() {\n        return \"embed\";\n    }\n    get schema() {\n        return {\n            content: \"inline*\",\n            group: \"block\",\n            atom: true,\n            attrs: {\n                href: {},\n            },\n            parseDOM: [\n                {\n                    tag: \"iframe[class=embed]\",\n                    getAttrs: (dom) => {\n                        const { embeds } = this.editor.props;\n                        const href = dom.getAttribute(\"src\") || \"\";\n                        if (embeds) {\n                            for (const embed of embeds) {\n                                const matches = embed.matcher(href);\n                                if (matches) {\n                                    return {\n                                        href,\n                                    };\n                                }\n                            }\n                        }\n                        return {};\n                    },\n                },\n            ],\n            toDOM: node => [\n                \"iframe\",\n                { class: \"embed\", src: node.attrs.href, contentEditable: false },\n                0,\n            ],\n        };\n    }\n    get rulePlugins() {\n        return [embeds_1.default(this.options.embeds)];\n    }\n    component({ isEditable, isSelected, theme, node }) {\n        const { embeds } = this.editor.props;\n        const hit = cache[node.attrs.href];\n        let Component = hit ? hit.Component : undefined;\n        let matches = hit ? hit.matches : undefined;\n        if (!Component) {\n            for (const embed of embeds) {\n                const m = embed.matcher(node.attrs.href);\n                if (m) {\n                    Component = embed.component;\n                    matches = m;\n                    cache[node.attrs.href] = { Component, matches };\n                }\n            }\n        }\n        if (!Component) {\n            return null;\n        }\n        return (React.createElement(Component, { attrs: Object.assign(Object.assign({}, node.attrs), { matches }), isEditable: isEditable, isSelected: isSelected, theme: theme }));\n    }\n    commands({ type }) {\n        return attrs => (state, dispatch) => {\n            dispatch(state.tr.replaceSelectionWith(type.create(attrs)).scrollIntoView());\n            return true;\n        };\n    }\n    toMarkdown(state, node) {\n        state.ensureNewLine();\n        state.write(\"[\" + state.esc(node.attrs.href) + \"](\" + state.esc(node.attrs.href) + \")\");\n        state.write(\"\\n\\n\");\n    }\n    parseMarkdown() {\n        return {\n            node: \"embed\",\n            getAttrs: token => ({\n                href: token.attrGet(\"href\"),\n            }),\n        };\n    }\n}\nexports.default = Embed;\n"]},"metadata":{},"sourceType":"script"}