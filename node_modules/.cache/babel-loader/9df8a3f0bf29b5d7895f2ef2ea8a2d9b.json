{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst prosemirror_tables_1 = require(\"prosemirror-tables\");\n\nconst prosemirror_commands_1 = require(\"prosemirror-commands\");\n\nconst Extension_1 = __importDefault(require(\"../lib/Extension\"));\n\nconst isUrl_1 = __importDefault(require(\"../lib/isUrl\"));\n\nconst isMarkdown_1 = __importDefault(require(\"../lib/isMarkdown\"));\n\nconst isInCode_1 = __importDefault(require(\"../queries/isInCode\"));\n\nconst Prism_1 = require(\"./Prism\");\n\nfunction normalizePastedMarkdown(text) {\n  const CHECKBOX_REGEX = /^\\s?(\\[(X|\\s|_|-)\\]\\s(.*)?)/gim;\n\n  while (text.match(CHECKBOX_REGEX)) {\n    text = text.replace(CHECKBOX_REGEX, match => `- ${match.trim()}`);\n  }\n\n  return text;\n}\n\nclass PasteHandler extends Extension_1.default {\n  get name() {\n    return \"markdown-paste\";\n  }\n\n  get plugins() {\n    return [new prosemirror_state_1.Plugin({\n      props: {\n        handlePaste: (view, event) => {\n          if (view.props.editable && !view.props.editable(view.state)) {\n            return false;\n          }\n\n          if (!event.clipboardData) return false;\n          const text = event.clipboardData.getData(\"text/plain\");\n          const html = event.clipboardData.getData(\"text/html\");\n          const vscode = event.clipboardData.getData(\"vscode-editor-data\");\n          const {\n            state,\n            dispatch\n          } = view;\n\n          if (isUrl_1.default(text)) {\n            if (!state.selection.empty) {\n              prosemirror_commands_1.toggleMark(this.editor.schema.marks.link, {\n                href: text\n              })(state, dispatch);\n              return true;\n            }\n\n            const {\n              embeds\n            } = this.editor.props;\n\n            if (embeds && !prosemirror_tables_1.isInTable(state)) {\n              for (const embed of embeds) {\n                const matches = embed.matcher(text);\n\n                if (matches) {\n                  this.editor.commands.embed({\n                    href: text\n                  });\n                  return true;\n                }\n              }\n            }\n\n            const transaction = view.state.tr.insertText(text, state.selection.from, state.selection.to).addMark(state.selection.from, state.selection.to + text.length, state.schema.marks.link.create({\n              href: text\n            }));\n            view.dispatch(transaction);\n            return true;\n          }\n\n          if (isInCode_1.default(view.state)) {\n            event.preventDefault();\n            view.dispatch(view.state.tr.insertText(text));\n            return true;\n          }\n\n          const vscodeMeta = vscode ? JSON.parse(vscode) : undefined;\n          const pasteCodeLanguage = vscodeMeta === null || vscodeMeta === void 0 ? void 0 : vscodeMeta.mode;\n\n          if (pasteCodeLanguage && pasteCodeLanguage !== \"markdown\") {\n            event.preventDefault();\n            view.dispatch(view.state.tr.replaceSelectionWith(view.state.schema.nodes.code_fence.create({\n              language: Object.keys(Prism_1.LANGUAGES).includes(vscodeMeta.mode) ? vscodeMeta.mode : null\n            })).insertText(text));\n            return true;\n          }\n\n          if (html === null || html === void 0 ? void 0 : html.includes(\"data-pm-slice\")) {\n            return false;\n          }\n\n          if (isMarkdown_1.default(text) || html.length === 0 || pasteCodeLanguage === \"markdown\") {\n            event.preventDefault();\n            const paste = this.editor.pasteParser.parse(normalizePastedMarkdown(text));\n            const slice = paste.slice(0);\n            const transaction = view.state.tr.replaceSelection(slice);\n            view.dispatch(transaction);\n            return true;\n          }\n\n          return false;\n        }\n      }\n    })];\n  }\n\n}\n\nexports.default = PasteHandler;","map":{"version":3,"sources":["../../src/plugins/PasteHandler.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst prosemirror_tables_1 = require(\"prosemirror-tables\");\nconst prosemirror_commands_1 = require(\"prosemirror-commands\");\nconst Extension_1 = __importDefault(require(\"../lib/Extension\"));\nconst isUrl_1 = __importDefault(require(\"../lib/isUrl\"));\nconst isMarkdown_1 = __importDefault(require(\"../lib/isMarkdown\"));\nconst isInCode_1 = __importDefault(require(\"../queries/isInCode\"));\nconst Prism_1 = require(\"./Prism\");\nfunction normalizePastedMarkdown(text) {\n    const CHECKBOX_REGEX = /^\\s?(\\[(X|\\s|_|-)\\]\\s(.*)?)/gim;\n    while (text.match(CHECKBOX_REGEX)) {\n        text = text.replace(CHECKBOX_REGEX, match => `- ${match.trim()}`);\n    }\n    return text;\n}\nclass PasteHandler extends Extension_1.default {\n    get name() {\n        return \"markdown-paste\";\n    }\n    get plugins() {\n        return [\n            new prosemirror_state_1.Plugin({\n                props: {\n                    handlePaste: (view, event) => {\n                        if (view.props.editable && !view.props.editable(view.state)) {\n                            return false;\n                        }\n                        if (!event.clipboardData)\n                            return false;\n                        const text = event.clipboardData.getData(\"text/plain\");\n                        const html = event.clipboardData.getData(\"text/html\");\n                        const vscode = event.clipboardData.getData(\"vscode-editor-data\");\n                        const { state, dispatch } = view;\n                        if (isUrl_1.default(text)) {\n                            if (!state.selection.empty) {\n                                prosemirror_commands_1.toggleMark(this.editor.schema.marks.link, { href: text })(state, dispatch);\n                                return true;\n                            }\n                            const { embeds } = this.editor.props;\n                            if (embeds && !prosemirror_tables_1.isInTable(state)) {\n                                for (const embed of embeds) {\n                                    const matches = embed.matcher(text);\n                                    if (matches) {\n                                        this.editor.commands.embed({\n                                            href: text,\n                                        });\n                                        return true;\n                                    }\n                                }\n                            }\n                            const transaction = view.state.tr\n                                .insertText(text, state.selection.from, state.selection.to)\n                                .addMark(state.selection.from, state.selection.to + text.length, state.schema.marks.link.create({ href: text }));\n                            view.dispatch(transaction);\n                            return true;\n                        }\n                        if (isInCode_1.default(view.state)) {\n                            event.preventDefault();\n                            view.dispatch(view.state.tr.insertText(text));\n                            return true;\n                        }\n                        const vscodeMeta = vscode ? JSON.parse(vscode) : undefined;\n                        const pasteCodeLanguage = vscodeMeta === null || vscodeMeta === void 0 ? void 0 : vscodeMeta.mode;\n                        if (pasteCodeLanguage && pasteCodeLanguage !== \"markdown\") {\n                            event.preventDefault();\n                            view.dispatch(view.state.tr\n                                .replaceSelectionWith(view.state.schema.nodes.code_fence.create({\n                                language: Object.keys(Prism_1.LANGUAGES).includes(vscodeMeta.mode)\n                                    ? vscodeMeta.mode\n                                    : null,\n                            }))\n                                .insertText(text));\n                            return true;\n                        }\n                        if (html === null || html === void 0 ? void 0 : html.includes(\"data-pm-slice\")) {\n                            return false;\n                        }\n                        if (isMarkdown_1.default(text) ||\n                            html.length === 0 ||\n                            pasteCodeLanguage === \"markdown\") {\n                            event.preventDefault();\n                            const paste = this.editor.pasteParser.parse(normalizePastedMarkdown(text));\n                            const slice = paste.slice(0);\n                            const transaction = view.state.tr.replaceSelection(slice);\n                            view.dispatch(transaction);\n                            return true;\n                        }\n                        return false;\n                    },\n                },\n            }),\n        ];\n    }\n}\nexports.default = PasteHandler;\n"]},"metadata":{},"sourceType":"script"}