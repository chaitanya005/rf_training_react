{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst prosemirror_view_1 = require(\"prosemirror-view\");\n\nconst Extension_1 = __importDefault(require(\"../lib/Extension\"));\n\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\n\nconst findCollapsedNodes_1 = __importDefault(require(\"../queries/findCollapsedNodes\"));\n\nconst headingToSlug_1 = require(\"../lib/headingToSlug\");\n\nclass Folding extends Extension_1.default {\n  get name() {\n    return \"folding\";\n  }\n\n  get plugins() {\n    let loaded = false;\n    return [new prosemirror_state_1.Plugin({\n      view: view => {\n        loaded = false;\n        view.dispatch(view.state.tr.setMeta(\"folding\", {\n          loaded: true\n        }));\n        return {};\n      },\n      appendTransaction: (transactions, oldState, newState) => {\n        if (loaded) return;\n\n        if (!transactions.some(transaction => transaction.getMeta(\"folding\"))) {\n          return;\n        }\n\n        let modified = false;\n        const tr = newState.tr;\n        const blocks = prosemirror_utils_1.findBlockNodes(newState.doc);\n\n        for (const block of blocks) {\n          if (block.node.type.name === \"heading\") {\n            const persistKey = headingToSlug_1.headingToPersistenceKey(block.node, this.editor.props.id);\n            const persistedState = localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(persistKey);\n\n            if (persistedState === \"collapsed\") {\n              tr.setNodeMarkup(block.pos, undefined, Object.assign(Object.assign({}, block.node.attrs), {\n                collapsed: true\n              }));\n              modified = true;\n            }\n          }\n        }\n\n        loaded = true;\n        return modified ? tr : null;\n      },\n      props: {\n        decorations: state => {\n          const {\n            doc\n          } = state;\n          const decorations = findCollapsedNodes_1.default(doc).map(block => prosemirror_view_1.Decoration.node(block.pos, block.pos + block.node.nodeSize, {\n            class: \"folded-content\"\n          }));\n          return prosemirror_view_1.DecorationSet.create(doc, decorations);\n        }\n      }\n    })];\n  }\n\n}\n\nexports.default = Folding;","map":{"version":3,"sources":["../../src/plugins/Folding.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst prosemirror_view_1 = require(\"prosemirror-view\");\nconst Extension_1 = __importDefault(require(\"../lib/Extension\"));\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\nconst findCollapsedNodes_1 = __importDefault(require(\"../queries/findCollapsedNodes\"));\nconst headingToSlug_1 = require(\"../lib/headingToSlug\");\nclass Folding extends Extension_1.default {\n    get name() {\n        return \"folding\";\n    }\n    get plugins() {\n        let loaded = false;\n        return [\n            new prosemirror_state_1.Plugin({\n                view: view => {\n                    loaded = false;\n                    view.dispatch(view.state.tr.setMeta(\"folding\", { loaded: true }));\n                    return {};\n                },\n                appendTransaction: (transactions, oldState, newState) => {\n                    if (loaded)\n                        return;\n                    if (!transactions.some(transaction => transaction.getMeta(\"folding\"))) {\n                        return;\n                    }\n                    let modified = false;\n                    const tr = newState.tr;\n                    const blocks = prosemirror_utils_1.findBlockNodes(newState.doc);\n                    for (const block of blocks) {\n                        if (block.node.type.name === \"heading\") {\n                            const persistKey = headingToSlug_1.headingToPersistenceKey(block.node, this.editor.props.id);\n                            const persistedState = localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(persistKey);\n                            if (persistedState === \"collapsed\") {\n                                tr.setNodeMarkup(block.pos, undefined, Object.assign(Object.assign({}, block.node.attrs), { collapsed: true }));\n                                modified = true;\n                            }\n                        }\n                    }\n                    loaded = true;\n                    return modified ? tr : null;\n                },\n                props: {\n                    decorations: state => {\n                        const { doc } = state;\n                        const decorations = findCollapsedNodes_1.default(doc).map(block => prosemirror_view_1.Decoration.node(block.pos, block.pos + block.node.nodeSize, {\n                            class: \"folded-content\",\n                        }));\n                        return prosemirror_view_1.DecorationSet.create(doc, decorations);\n                    },\n                },\n            }),\n        ];\n    }\n}\nexports.default = Folding;\n"]},"metadata":{},"sourceType":"script"}