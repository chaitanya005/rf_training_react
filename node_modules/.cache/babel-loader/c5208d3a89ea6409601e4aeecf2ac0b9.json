{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst Extension_1 = __importDefault(require(\"../lib/Extension\"));\n\nconst isInCode_1 = __importDefault(require(\"../queries/isInCode\"));\n\nconst BlockMenuTrigger_1 = require(\"./BlockMenuTrigger\");\n\nconst OPEN_REGEX = /(?:^|\\s):([0-9a-zA-Z_+-]+)?$/;\nconst CLOSE_REGEX = /(?:^|\\s):(([0-9a-zA-Z_+-]*\\s+)|(\\s+[0-9a-zA-Z_+-]+)|[^0-9a-zA-Z_+-]+)$/;\n\nclass EmojiTrigger extends Extension_1.default {\n  get name() {\n    return \"emojimenu\";\n  }\n\n  get plugins() {\n    return [new prosemirror_state_1.Plugin({\n      props: {\n        handleClick: () => {\n          this.options.onClose();\n          return false;\n        },\n        handleKeyDown: (view, event) => {\n          if (event.key === \"Backspace\") {\n            setTimeout(() => {\n              const {\n                pos\n              } = view.state.selection.$from;\n              return BlockMenuTrigger_1.run(view, pos, pos, OPEN_REGEX, (state, match) => {\n                if (match) {\n                  this.options.onOpen(match[1]);\n                } else {\n                  this.options.onClose();\n                }\n\n                return null;\n              });\n            });\n          }\n\n          if (event.key === \"Enter\" || event.key === \"ArrowUp\" || event.key === \"ArrowDown\" || event.key === \"Tab\") {\n            const {\n              pos\n            } = view.state.selection.$from;\n            return BlockMenuTrigger_1.run(view, pos, pos, OPEN_REGEX, (state, match) => {\n              return match ? true : null;\n            });\n          }\n\n          return false;\n        }\n      }\n    })];\n  }\n\n  inputRules() {\n    return [new prosemirror_inputrules_1.InputRule(OPEN_REGEX, (state, match) => {\n      if (match && state.selection.$from.parent.type.name === \"paragraph\" && !isInCode_1.default(state)) {\n        this.options.onOpen(match[1]);\n      }\n\n      return null;\n    }), new prosemirror_inputrules_1.InputRule(CLOSE_REGEX, (state, match) => {\n      if (match) {\n        this.options.onClose();\n      }\n\n      return null;\n    })];\n  }\n\n}\n\nexports.default = EmojiTrigger;","map":{"version":3,"sources":["../../src/plugins/EmojiTrigger.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,MAAM,UAAU,GAAG,8BAAnB;AACA,MAAM,WAAW,GAAG,wEAApB;;AAEA,MAAqB,YAArB,SAA0C,WAAA,CAAA,OAA1C,CAAmD;AACzC,MAAJ,IAAI,GAAA;AACN,WAAO,WAAP;AACD;;AAEU,MAAP,OAAO,GAAA;AACT,WAAO,CACL,IAAI,mBAAA,CAAA,MAAJ,CAAW;AACT,MAAA,KAAK,EAAE;AACL,QAAA,WAAW,EAAE,MAAK;AAChB,eAAK,OAAL,CAAa,OAAb;AACA,iBAAO,KAAP;AACD,SAJI;AAKL,QAAA,aAAa,EAAE,CAAC,IAAD,EAAO,KAAP,KAAgB;AAI7B,cAAI,KAAK,CAAC,GAAN,KAAc,WAAlB,EAA+B;AAG7B,YAAA,UAAU,CAAC,MAAK;AACd,oBAAM;AAAE,gBAAA;AAAF,kBAAU,IAAI,CAAC,KAAL,CAAW,SAAX,CAAqB,KAArC;AACA,qBAAO,kBAAA,CAAA,GAAA,CAAI,IAAJ,EAAU,GAAV,EAAe,GAAf,EAAoB,UAApB,EAAgC,CAAC,KAAD,EAAQ,KAAR,KAAiB;AACtD,oBAAI,KAAJ,EAAW;AACT,uBAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,CAAC,CAAD,CAAzB;AACD,iBAFD,MAEO;AACL,uBAAK,OAAL,CAAa,OAAb;AACD;;AACD,uBAAO,IAAP;AACD,eAPM,CAAP;AAQD,aAVS,CAAV;AAWD;;AAID,cACE,KAAK,CAAC,GAAN,KAAc,OAAd,IACA,KAAK,CAAC,GAAN,KAAc,SADd,IAEA,KAAK,CAAC,GAAN,KAAc,WAFd,IAGA,KAAK,CAAC,GAAN,KAAc,KAJhB,EAKE;AACA,kBAAM;AAAE,cAAA;AAAF,gBAAU,IAAI,CAAC,KAAL,CAAW,SAAX,CAAqB,KAArC;AAEA,mBAAO,kBAAA,CAAA,GAAA,CAAI,IAAJ,EAAU,GAAV,EAAe,GAAf,EAAoB,UAApB,EAAgC,CAAC,KAAD,EAAQ,KAAR,KAAiB;AAEtD,qBAAO,KAAK,GAAG,IAAH,GAAU,IAAtB;AACD,aAHM,CAAP;AAID;;AAED,iBAAO,KAAP;AACD;AA1CI;AADE,KAAX,CADK,CAAP;AAgDD;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,CAGL,IAAI,wBAAA,CAAA,SAAJ,CAAc,UAAd,EAA0B,CAAC,KAAD,EAAQ,KAAR,KAAiB;AACzC,UACE,KAAK,IACL,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,MAAtB,CAA6B,IAA7B,CAAkC,IAAlC,KAA2C,WAD3C,IAEA,CAAC,UAAA,CAAA,OAAA,CAAS,KAAT,CAHH,EAIE;AACA,aAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,CAAC,CAAD,CAAzB;AACD;;AACD,aAAO,IAAP;AACD,KATD,CAHK,EAkBL,IAAI,wBAAA,CAAA,SAAJ,CAAc,WAAd,EAA2B,CAAC,KAAD,EAAQ,KAAR,KAAiB;AAC1C,UAAI,KAAJ,EAAW;AACT,aAAK,OAAL,CAAa,OAAb;AACD;;AACD,aAAO,IAAP;AACD,KALD,CAlBK,CAAP;AAyBD;;AAlFgD;;AAAnD,OAAA,CAAA,OAAA,GAAA,YAAA","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_inputrules_1 = require(\"prosemirror-inputrules\");\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst Extension_1 = __importDefault(require(\"../lib/Extension\"));\nconst isInCode_1 = __importDefault(require(\"../queries/isInCode\"));\nconst BlockMenuTrigger_1 = require(\"./BlockMenuTrigger\");\nconst OPEN_REGEX = /(?:^|\\s):([0-9a-zA-Z_+-]+)?$/;\nconst CLOSE_REGEX = /(?:^|\\s):(([0-9a-zA-Z_+-]*\\s+)|(\\s+[0-9a-zA-Z_+-]+)|[^0-9a-zA-Z_+-]+)$/;\nclass EmojiTrigger extends Extension_1.default {\n    get name() {\n        return \"emojimenu\";\n    }\n    get plugins() {\n        return [\n            new prosemirror_state_1.Plugin({\n                props: {\n                    handleClick: () => {\n                        this.options.onClose();\n                        return false;\n                    },\n                    handleKeyDown: (view, event) => {\n                        if (event.key === \"Backspace\") {\n                            setTimeout(() => {\n                                const { pos } = view.state.selection.$from;\n                                return BlockMenuTrigger_1.run(view, pos, pos, OPEN_REGEX, (state, match) => {\n                                    if (match) {\n                                        this.options.onOpen(match[1]);\n                                    }\n                                    else {\n                                        this.options.onClose();\n                                    }\n                                    return null;\n                                });\n                            });\n                        }\n                        if (event.key === \"Enter\" ||\n                            event.key === \"ArrowUp\" ||\n                            event.key === \"ArrowDown\" ||\n                            event.key === \"Tab\") {\n                            const { pos } = view.state.selection.$from;\n                            return BlockMenuTrigger_1.run(view, pos, pos, OPEN_REGEX, (state, match) => {\n                                return match ? true : null;\n                            });\n                        }\n                        return false;\n                    },\n                },\n            }),\n        ];\n    }\n    inputRules() {\n        return [\n            new prosemirror_inputrules_1.InputRule(OPEN_REGEX, (state, match) => {\n                if (match &&\n                    state.selection.$from.parent.type.name === \"paragraph\" &&\n                    !isInCode_1.default(state)) {\n                    this.options.onOpen(match[1]);\n                }\n                return null;\n            }),\n            new prosemirror_inputrules_1.InputRule(CLOSE_REGEX, (state, match) => {\n                if (match) {\n                    this.options.onClose();\n                }\n                return null;\n            }),\n        ];\n    }\n}\nexports.default = EmojiTrigger;\n"]},"metadata":{},"sourceType":"script"}