{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst prosemirror_state_1 = require(\"prosemirror-state\");\n\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\n\nconst findCollapsedNodes_1 = __importDefault(require(\"../queries/findCollapsedNodes\"));\n\nfunction splitHeading(type) {\n  return (state, dispatch) => {\n    const {\n      $from,\n      from,\n      $to,\n      to\n    } = state.selection;\n    if ($from.parent.type !== type) return false;\n    const endPos = $to.after() - 1;\n    if (endPos !== to) return false;\n    if (!$from.parent.attrs.collapsed) return false;\n    const allBlocks = prosemirror_utils_1.findBlockNodes(state.doc);\n    const collapsedBlocks = findCollapsedNodes_1.default(state.doc);\n    const visibleBlocks = allBlocks.filter(a => !collapsedBlocks.find(b => b.pos === a.pos));\n    const nextVisibleBlock = visibleBlocks.find(a => a.pos > from);\n    const pos = nextVisibleBlock ? nextVisibleBlock.pos : state.doc.content.size;\n    const transaction = state.tr.insert(pos, type.create(Object.assign(Object.assign({}, $from.parent.attrs), {\n      collapsed: false\n    })));\n    dispatch(transaction.setSelection(prosemirror_state_1.TextSelection.near(transaction.doc.resolve(Math.min(pos + 1, transaction.doc.content.size)))).scrollIntoView());\n    return true;\n  };\n}\n\nexports.default = splitHeading;","map":{"version":3,"sources":["../../src/commands/splitHeading.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,oBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,+BAAA,CAAA,CAAA;;AAEA,SAAwB,YAAxB,CAAqC,IAArC,EAAmD;AACjD,SAAO,CAAC,KAAD,EAAqB,QAArB,KAA0C;AAC/C,UAAM;AAAE,MAAA,KAAF;AAAS,MAAA,IAAT;AAAe,MAAA,GAAf;AAAoB,MAAA;AAApB,QAA2B,KAAK,CAAC,SAAvC;AAGA,QAAI,KAAK,CAAC,MAAN,CAAa,IAAb,KAAsB,IAA1B,EAAgC,OAAO,KAAP;AAIhC,UAAM,MAAM,GAAG,GAAG,CAAC,KAAJ,KAAc,CAA7B;AACA,QAAI,MAAM,KAAK,EAAf,EAAmB,OAAO,KAAP;AAGnB,QAAI,CAAC,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,SAAxB,EAAmC,OAAO,KAAP;AAInC,UAAM,SAAS,GAAG,mBAAA,CAAA,cAAA,CAAe,KAAK,CAAC,GAArB,CAAlB;AACA,UAAM,eAAe,GAAG,oBAAA,CAAA,OAAA,CAAmB,KAAK,CAAC,GAAzB,CAAxB;AACA,UAAM,aAAa,GAAG,SAAS,CAAC,MAAV,CACpB,CAAC,IAAI,CAAC,eAAe,CAAC,IAAhB,CAAqB,CAAC,IAAI,CAAC,CAAC,GAAF,KAAU,CAAC,CAAC,GAAtC,CADc,CAAtB;AAGA,UAAM,gBAAgB,GAAG,aAAa,CAAC,IAAd,CAAmB,CAAC,IAAI,CAAC,CAAC,GAAF,GAAQ,IAAhC,CAAzB;AACA,UAAM,GAAG,GAAG,gBAAgB,GACxB,gBAAgB,CAAC,GADO,GAExB,KAAK,CAAC,GAAN,CAAU,OAAV,CAAkB,IAFtB;AAKA,UAAM,WAAW,GAAG,KAAK,CAAC,EAAN,CAAS,MAAT,CAClB,GADkB,EAElB,IAAI,CAAC,MAAL,CAAW,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,KAAK,CAAC,MAAN,CAAa,KAAnB,CAAA,EAAwB;AAAE,MAAA,SAAS,EAAE;AAAb,KAAxB,CAAX,CAFkB,CAApB;AAMA,IAAA,QAAQ,CACN,WAAW,CACR,YADH,CAEI,mBAAA,CAAA,aAAA,CAAc,IAAd,CACE,WAAW,CAAC,GAAZ,CAAgB,OAAhB,CACE,IAAI,CAAC,GAAL,CAAS,GAAG,GAAG,CAAf,EAAkB,WAAW,CAAC,GAAZ,CAAgB,OAAhB,CAAwB,IAA1C,CADF,CADF,CAFJ,EAQG,cARH,EADM,CAAR;AAYA,WAAO,IAAP;AACD,GA9CD;AA+CD;;AAhDD,OAAA,CAAA,OAAA,GAAA,YAAA","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prosemirror_state_1 = require(\"prosemirror-state\");\nconst prosemirror_utils_1 = require(\"prosemirror-utils\");\nconst findCollapsedNodes_1 = __importDefault(require(\"../queries/findCollapsedNodes\"));\nfunction splitHeading(type) {\n    return (state, dispatch) => {\n        const { $from, from, $to, to } = state.selection;\n        if ($from.parent.type !== type)\n            return false;\n        const endPos = $to.after() - 1;\n        if (endPos !== to)\n            return false;\n        if (!$from.parent.attrs.collapsed)\n            return false;\n        const allBlocks = prosemirror_utils_1.findBlockNodes(state.doc);\n        const collapsedBlocks = findCollapsedNodes_1.default(state.doc);\n        const visibleBlocks = allBlocks.filter(a => !collapsedBlocks.find(b => b.pos === a.pos));\n        const nextVisibleBlock = visibleBlocks.find(a => a.pos > from);\n        const pos = nextVisibleBlock\n            ? nextVisibleBlock.pos\n            : state.doc.content.size;\n        const transaction = state.tr.insert(pos, type.create(Object.assign(Object.assign({}, $from.parent.attrs), { collapsed: false })));\n        dispatch(transaction\n            .setSelection(prosemirror_state_1.TextSelection.near(transaction.doc.resolve(Math.min(pos + 1, transaction.doc.content.size))))\n            .scrollIntoView());\n        return true;\n    };\n}\nexports.default = splitHeading;\n"]},"metadata":{},"sourceType":"script"}